// <auto-generated />
using System;
using Datas;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Datas.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("202405280850_initialdatabase")]
    partial class initialdatabase
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);
            modelBuilder.Entity("Entities.UserBoard", b =>
            {
                b.Property<int>("Id")
                .IsRequired()
                .ValueGeneratedOnAdd()
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);
                b.Property<string>("Title")
                .IsRequired()
                .HasMaxLength(100);
                b.Property<string>("Content")
                .IsRequired()
                .HasMaxLength(int.MaxValue);
                b.Property<int>("AuthorId")
                .IsRequired();
                b.Property<DateTimeOffset>("CreateDate")
                .IsRequired();
                b.HasKey("Id");
                b.HasIndex("AuthorId");
                b.ToTable("UserBoards");
            });
            modelBuilder.Entity("Entities.Topic", b =>
            {
                b.Property<int>("Id")
                .ValueGeneratedOnAdd()
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);
                b.Property<int>("ParentTopicId");
                b.Property<string>("Title")
                .IsRequired()
                .HasMaxLength(100);
                b.Property<int>("AuthorId")
                .IsRequired();
                b.HasKey("Id");
                b.HasIndex("ParentTopicId");
                b.HasIndex("AuthorId");
                b.ToTable("Topics");
            });
            modelBuilder.Entity("Entities.UserBoardTopic", b =>
            {
                b.Property<int>("Id")
                .ValueGeneratedOnAdd()
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);
                b.Property<int>("TopicId")
                .IsRequired();
                b.Property<int>("UserBoardId")
                .IsRequired();
                b.HasIndex("Id");
                b.HasIndex("TopicId");
                b.HasIndex("UserBoardId");
                b.ToTable("UserBoardTopics");
            });
            modelBuilder.Entity("Entities.UserBoardComment", b =>
            {
                b.Property<int>("Id")
                .ValueGeneratedOnAdd()
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);
                b.Property<string>("Content")
                .IsRequired()
                .HasMaxLength(1000);
                b.Property<int>("UserBoardId")
                .IsRequired();
                b.Property<DateTimeOffset>("CreateDate")
                .IsRequired();
                b.Property<int>("AuthorId")
                .IsRequired();
                b.HasKey("Id");
                b.HasIndex("UserBoardId");
                b.HasIndex("AuthorId");
                b.ToTable("UserBoardComments");
            });
            modelBuilder.Entity("Entities.UserBoardImage", b =>
            {
                b.Property<int>("Id")
                .ValueGeneratedOnAdd()
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);
                b.Property<string>("Path")
                .IsRequired()
                .HasMaxLength(1000);
                b.Property<int>("UserBoardId")
                .IsRequired();
                b.HasKey("Id");
                b.HasIndex("UserBoardId");
                b.ToTable("UserBoardImages");
            });
            modelBuilder.Entity("Entities.Role", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);
                b.Property<string>("ConcurrencyStamp")
                    .IsConcurrencyToken();
                b.Property<string>("Description")
                    .IsRequired()
                    .HasMaxLength(100);
                b.Property<string>("Name")
                    .IsRequired()
                    .HasMaxLength(50);
                b.Property<string>("NormalizedName")
                    .HasMaxLength(256);
                b.HasKey("Id");
                b.HasIndex("NormalizedName")
                    .IsUnique()
                    .HasName("RoleNameIndex")
                    .HasFilter("[NormalizedName] IS NOT NULL");
                b.ToTable("AspNetRoles");
            });

            modelBuilder.Entity("Entities.User", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);
                b.Property<int>("AccessFailedCount");
                b.Property<int>("Age");
                b.Property<string>("ConcurrencyStamp")
                    .IsConcurrencyToken();
                b.Property<string>("Email")
                    .HasMaxLength(256);
                b.Property<bool>("EmailConfirmed");
                b.Property<string>("FullName")
                    .IsRequired()
                    .HasMaxLength(100);
                b.Property<int>("Gender");
                b.Property<bool>("IsActive");
                b.Property<DateTimeOffset?>("LastLoginDate");
                b.Property<bool>("LockoutEnabled");
                b.Property<DateTimeOffset?>("LockoutEnd");
                b.Property<string>("NormalizedEmail")
                    .HasMaxLength(256);
                b.Property<string>("NormalizedUserName")
                    .HasMaxLength(256);
                b.Property<string>("PasswordHash");
                b.Property<string>("PhoneNumber");
                b.Property<bool>("PhoneNumberConfirmed");
                b.Property<string>("SecurityStamp");
                b.Property<bool>("TwoFactorEnabled");
                b.Property<string>("UserName")
                    .IsRequired()
                    .HasMaxLength(100);
                b.HasKey("Id");
                b.HasIndex("NormalizedEmail")
                    .HasName("EmailIndex");
                b.HasIndex("NormalizedUserName")
                    .IsUnique()
                    .HasName("UserNameIndex")
                    .HasFilter("[NormalizedUserName] IS NOT NULL");
                b.ToTable("AspNetUsers");
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);
                b.Property<string>("ClaimType");
                b.Property<string>("ClaimValue");
                b.Property<int>("RoleId");
                b.HasKey("Id");
                b.HasIndex("RoleId");
                b.ToTable("AspNetRoleClaims");
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);
                b.Property<string>("ClaimType");
                b.Property<string>("ClaimValue");
                b.Property<int>("UserId");
                b.HasKey("Id");
                b.HasIndex("UserId");
                b.ToTable("AspNetUserClaims");
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
            {
                b.Property<string>("LoginProvider");
                b.Property<string>("ProviderKey");
                b.Property<string>("ProviderDisplayName");
                b.Property<int>("UserId");
                b.HasKey("LoginProvider", "ProviderKey");
                b.HasIndex("UserId");
                b.ToTable("AspNetUserLogins");
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
            {
                b.Property<int>("UserId");
                b.Property<int>("RoleId");
                b.HasKey("UserId", "RoleId");
                b.HasIndex("RoleId");
                b.ToTable("AspNetUserRoles");
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
            {
                b.Property<int>("UserId");
                b.Property<string>("LoginProvider");
                b.Property<string>("Name");
                b.Property<string>("Value");
                b.HasKey("UserId", "LoginProvider", "Name");
                b.ToTable("AspNetUserTokens");
            });
            modelBuilder.Entity("Entities.UserBoardComment", b =>
            {
                b.HasOne("Entities.User", "User")
                .WithMany("UserBoardComments")
                .HasForeignKey("AuthorId")
                .OnDelete(DeleteBehavior.Cascade);
                b.HasOne("Entities.UserBoard")
                .WithMany("UserBoardComments")
                .HasForeignKey("UserBoardId");
            });
            modelBuilder.Entity("Entities.UserBoardImage", b =>
            {
                b.HasOne("Entities.UserBoard")
                .WithMany("UserBoardImages")
                .HasForeignKey("UserBoardId");
            });
            modelBuilder.Entity("Entities.UserBoard", b =>
            {
                b.HasOne("Entities.User", "User")
                .WithMany("UserBoards")
                .HasForeignKey("AuthorId")
                .OnDelete(DeleteBehavior.Restrict);
                b.HasOne("Entities.UserBoardTopic", "UserBoardTopic")
                .WithMany()
                .HasForeignKey("UserBoardTopicId");
            });
            modelBuilder.Entity("Entities.UserBoardTopic", b =>
            {
                b.HasOne("Entities.UserBoard", "UserBoard")
                .WithMany()
                .HasForeignKey("UserBoardId");
                b.HasOne("Entities.Topic", "Topic")
                .WithMany()
                .HasForeignKey("TopicId");
            });
            modelBuilder.Entity("Entities.Topic", b =>
            {
                b.HasOne("Entities.Topic", "ParentTopic")
                .WithMany("ChildTopics")
                .HasForeignKey("ParentTopicId");
            });
            modelBuilder.Entity("Entities.Category", b =>
            {
                b.HasOne("Entities.Category", "ParentCategory")
                    .WithMany("ChildCategories")
                    .HasForeignKey("ParentCategoryId");
            });
            modelBuilder.Entity("Entities.Post", b =>
            {
                b.HasOne("Entities.User", "Author")
                    .WithMany("Posts")
                    .HasForeignKey("AuthorId")
                    .OnDelete(DeleteBehavior.Restrict);
                b.HasOne("Entities.Category", "Category")
                    .WithMany("Posts")
                    .HasForeignKey("CategoryId")
                    .OnDelete(DeleteBehavior.Restrict);
            });
            modelBuilder.Entity("Entities.Category", b =>
            {
                b.HasOne("Entities.Category", "ParentCategory")
                    .WithMany("ChildCategories")
                    .HasForeignKey("ParentCategoryId");
            });
            modelBuilder.Entity("Entities.Post", b =>
            {
                b.HasOne("Entities.User", "Author")
                    .WithMany("Posts")
                    .HasForeignKey("AuthorId")
                    .OnDelete(DeleteBehavior.Restrict);
                b.HasOne("Entities.Category", "Category")
                    .WithMany("Posts")
                    .HasForeignKey("CategoryId")
                    .OnDelete(DeleteBehavior.Restrict);
            });
            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
            {
                b.HasOne("Entities.Role")
                    .WithMany()
                    .HasForeignKey("RoleId")
                    .OnDelete(DeleteBehavior.Restrict);
            });
            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
            {
                b.HasOne("Entities.User")
                    .WithMany()
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Restrict);
            });
            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
            {
                b.HasOne("Entities.User")
                    .WithMany()
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Restrict);
            });
            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
            {
                b.HasOne("Entities.Role")
                    .WithMany()
                    .HasForeignKey("RoleId")
                    .OnDelete(DeleteBehavior.Restrict);
                b.HasOne("Entities.User")
                    .WithMany()
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Restrict);
            });
            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
            {
                b.HasOne("Entities.User")
                    .WithMany()
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Restrict);
            });
#pragma warning restore 612, 618
        }
    }
}
